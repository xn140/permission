/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2018-06-14 14:32:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class log_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/common/backend_common.jsp", out, false);
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/common/page.jsp", out, false);
      out.write("\n");
      out.write("</head>\n");
      out.write("<body class=\"no-skin\" youdao=\"bind\" style=\"background: white\">\n");
      out.write("<input id=\"gritter-light\" checked=\"\" type=\"checkbox\" class=\"ace ace-switch ace-switch-5\"/>\n");
      out.write("\n");
      out.write("<div class=\"page-header\">\n");
      out.write("    <h1>\n");
      out.write("        权限操作记录\n");
      out.write("        <small>\n");
      out.write("            <i class=\"ace-icon fa fa-angle-double-right\"></i>\n");
      out.write("            管理权限相关模块更新历史\n");
      out.write("        </small>\n");
      out.write("    </h1>\n");
      out.write("</div>\n");
      out.write("<div class=\"main-content-inner\">\n");
      out.write("    <div class=\"col-sm-12\">\n");
      out.write("        <div class=\"col-xs-12\">\n");
      out.write("            <div class=\"table-header\">\n");
      out.write("                操作列表\n");
      out.write("            </div>\n");
      out.write("            <div>\n");
      out.write("                <div id=\"dynamic-table_wrapper\" class=\"dataTables_wrapper form-inline no-footer\">\n");
      out.write("                    <div class=\"row\">\n");
      out.write("                        <div class=\"col-xs-12\">\n");
      out.write("                            <div class=\"dataTables_length\" id=\"dynamic-table_length\"><label>\n");
      out.write("                                展示\n");
      out.write("                                <select id=\"pageSize\" name=\"dynamic-table_length\" aria-controls=\"dynamic-table\" class=\"form-control input-sm\">\n");
      out.write("                                    <option value=\"10\">10</option>\n");
      out.write("                                    <option value=\"25\">25</option>\n");
      out.write("                                    <option value=\"50\">50</option>\n");
      out.write("                                    <option value=\"100\">100</option>\n");
      out.write("                                </select> 条记录 </label>\n");
      out.write("                                <label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类型\n");
      out.write("                                    <select id=\"search-type\" name=\"dynamic-table_length\" aria-controls=\"dynamic-table\" class=\"form-control input-sm\">\n");
      out.write("                                        <option value=\"\">全部</option>\n");
      out.write("                                        <option value=\"1\">部门</option>\n");
      out.write("                                        <option value=\"2\">用户</option>\n");
      out.write("                                        <option value=\"3\">权限模块</option>\n");
      out.write("                                        <option value=\"4\">权限</option>\n");
      out.write("                                        <option value=\"5\">角色</option>\n");
      out.write("                                        <option value=\"6\">角色权限关系</option>\n");
      out.write("                                        <option value=\"7\">角色用户关系</option>\n");
      out.write("                                    </select></label>\n");
      out.write("\n");
      out.write("                                <input id=\"search-operator\" type=\"search\" name=\"operator\" class=\"form-control input-sm\" placeholder=\"操作者\" aria-controls=\"dynamic-table\">\n");
      out.write("                                <input id=\"search-before\" type=\"search\" name=\"beforeSeg\" class=\"form-control input-sm\" placeholder=\"操作前的值\" aria-controls=\"dynamic-table\">\n");
      out.write("                                <input id=\"search-after\" type=\"search\" name=\"afterSeg\" class=\"form-control input-sm\" placeholder=\"操作后的值\" aria-controls=\"dynamic-table\">\n");
      out.write("                                <input id=\"search-from\"type=\"search\" name=\"fromTime\" class=\"form-control input-sm\" placeholder=\"开始时间\" aria-controls=\"dynamic-table\"> ~\n");
      out.write("                                <input id=\"search-to\" type=\"search\" name=\"toTime\" class=\"form-control input-sm\" placeholder=\"结束时间\" aria-controls=\"dynamic-table\">\n");
      out.write("                                &nbsp;&nbsp;&nbsp;&nbsp;\n");
      out.write("                                <button class=\"btn btn-info fa fa-check research\" style=\"margin-bottom: 6px;\" type=\"button\">\n");
      out.write("                                    刷新\n");
      out.write("                                </button>\n");
      out.write("                            </div>\n");
      out.write("                        </div>\n");
      out.write("                        <table id=\"dynamic-table\" class=\"table table-striped table-bordered table-hover dataTable no-footer\" role=\"grid\"\n");
      out.write("                               aria-describedby=\"dynamic-table_info\" style=\"font-size:14px\">\n");
      out.write("                            <thead>\n");
      out.write("                            <tr role=\"row\">\n");
      out.write("                                <th tabindex=\"0\" aria-controls=\"dynamic-table\" rowspan=\"1\" colspan=\"1\">\n");
      out.write("                                    操作者\n");
      out.write("                                </th>\n");
      out.write("                                <th tabindex=\"0\" aria-controls=\"dynamic-table\" rowspan=\"1\" colspan=\"1\">\n");
      out.write("                                    操作类型\n");
      out.write("                                </th>\n");
      out.write("                                <th tabindex=\"0\" aria-controls=\"dynamic-table\" rowspan=\"1\" colspan=\"1\">\n");
      out.write("                                    操作时间\n");
      out.write("                                </th>\n");
      out.write("                                <th tabindex=\"0\" aria-controls=\"dynamic-table\" rowspan=\"1\" colspan=\"1\">\n");
      out.write("                                    操作前的值\n");
      out.write("                                </th>\n");
      out.write("                                <th tabindex=\"0\" aria-controls=\"dynamic-table\" rowspan=\"1\" colspan=\"1\">\n");
      out.write("                                    操作后的值\n");
      out.write("                                </th>\n");
      out.write("                                <th class=\"sorting_disabled\" rowspan=\"1\" colspan=\"1\" aria-label=\"\"></th>\n");
      out.write("                            </tr>\n");
      out.write("                            </thead>\n");
      out.write("                            <tbody id=\"logList\"></tbody>\n");
      out.write("                        </table>\n");
      out.write("                        <div class=\"row\" id=\"logPage\">\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script id=\"logListTemplate\" type=\"x-tmpl-mustache\">\n");
      out.write("{{#logList}}\n");
      out.write("<tr role=\"row\" class=\"config odd\" data-id=\"{{id}}\"><!--even -->\n");
      out.write("    <td>{{operator}}</td>\n");
      out.write("    <td>{{#showType}}{{/showType}}</td>\n");
      out.write("    <td>{{#showDate}}{{/showDate}}</td>\n");
      out.write("    <td><pre>{{#showOldValue}}{{/showOldValue}}</pre></td>\n");
      out.write("    <td><pre>{{#showNewValue}}{{/showNewValue}}</pre></td>\n");
      out.write("    <td>\n");
      out.write("        <div class=\"hidden-sm hidden-xs action-buttons\">\n");
      out.write("            <a class=\"green log-edit\" href=\"#\" data-id=\"{{id}}\">\n");
      out.write("                <i class=\"ace-icon fa fa-pencil bigger-100\"></i>\n");
      out.write("            </a>\n");
      out.write("        </div>\n");
      out.write("    </td>\n");
      out.write("</tr>\n");
      out.write("{{/logList}}\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        $(function () {\n");
      out.write("            var logListTemplate = $('#logListTemplate').html();\n");
      out.write("            Mustache.parse(logListTemplate);\n");
      out.write("            var logMap = {};\n");
      out.write("\n");
      out.write("            loadLogList();\n");
      out.write("\n");
      out.write("            $(\".research\").click(function (e) {\n");
      out.write("                e.preventDefault();\n");
      out.write("                loadLogList();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            function loadLogList() {\n");
      out.write("                var pageSize = $(\"#pageSize\").val();\n");
      out.write("                var pageNo = $(\"#logPage .pageNo\").val() || 1;\n");
      out.write("                var url = \"/sys/log/page.json\";\n");
      out.write("                var beforeSeg = $(\"#search-before\").val();\n");
      out.write("                var afterSeg = $(\"#search-after\").val();\n");
      out.write("                var operator = $(\"#search-operator\").val();\n");
      out.write("                var fromTime = $(\"#search-from\").val();\n");
      out.write("                var toTime = $(\"#search-to\").val();\n");
      out.write("                var type = $(\"#search-type\").val();\n");
      out.write("                $.ajax({\n");
      out.write("                    url: url,\n");
      out.write("                    data: {\n");
      out.write("                        pageNo: pageNo,\n");
      out.write("                        pageSize: pageSize,\n");
      out.write("                        beforeSeg: beforeSeg,\n");
      out.write("                        afterSeg : afterSeg,\n");
      out.write("                        operator : operator,\n");
      out.write("                        fromTime: fromTime,\n");
      out.write("                        toTime: toTime,\n");
      out.write("                        type: type\n");
      out.write("                    },\n");
      out.write("                    type: 'POST',\n");
      out.write("                    success: function (result) {\n");
      out.write("                        renderLogListAndPage(result, url);\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function renderLogListAndPage(result, url) {\n");
      out.write("                if (result.ret) {\n");
      out.write("                    if (result.data.total > 0) {\n");
      out.write("                        var rendered = Mustache.render(logListTemplate, {\n");
      out.write("                            \"logList\": result.data.data,\n");
      out.write("                            \"showType\": function () {\n");
      out.write("                                return function (text, render) {\n");
      out.write("                                    var typeStr = \"\";\n");
      out.write("                                    switch (this.type) {\n");
      out.write("                                        case 1: typeStr = \"部门\";break;\n");
      out.write("                                        case 2: typeStr = \"用户\";break;\n");
      out.write("                                        case 3: typeStr = \"权限模块\";break;\n");
      out.write("                                        case 4: typeStr = \"权限点\";break;\n");
      out.write("                                        case 5: typeStr = \"角色\";break;\n");
      out.write("                                        case 6: typeStr = \"角色权限关系\";break;\n");
      out.write("                                        case 7: typeStr = \"角色用户关系\";break;\n");
      out.write("                                        default: typeStr = \"未知\";\n");
      out.write("                                    }\n");
      out.write("                                    return typeStr;\n");
      out.write("                                }\n");
      out.write("                            },\n");
      out.write("                            \"showDate\" :function () {\n");
      out.write("                                return function (text, render) {\n");
      out.write("                                    return new Date(this.operateTime).Format(\"yyyy-MM-dd hh:mm:ss\");\n");
      out.write("                                }\n");
      out.write("                            },\n");
      out.write("                            \"showOldValue\": function () {\n");
      out.write("                                return function (text, render) {\n");
      out.write("                                    return this.oldValue ? ((this.type == 6 || this.type == 7) ? this.oldValue : formatJson(this.oldValue)) : '无';\n");
      out.write("                                }\n");
      out.write("                            },\n");
      out.write("                            \"showNewValue\": function () {\n");
      out.write("                                return function (text, render) {\n");
      out.write("                                    return this.newValue ? ((this.type == 6 || this.type == 7) ? this.newValue : formatJson(this.newValue)) : '无';\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                        });\n");
      out.write("                        $('#logList').html(rendered);\n");
      out.write("                        $.each(result.data.data, function (i, log) {\n");
      out.write("                            logMap[log.id] = log;\n");
      out.write("                        });\n");
      out.write("                    } else {\n");
      out.write("                        $('#logList').html('');\n");
      out.write("                    }\n");
      out.write("                    bindLogClick();\n");
      out.write("                    var pageSize = $(\"#pageSize\").val();\n");
      out.write("                    var pageNo = $(\"#logPage .pageNo\").val() || 1;\n");
      out.write("                    renderPage(url, result.data.total, pageNo, pageSize, result.data.total > 0 ? result.data.data.length : 0, \"logPage\", renderLogListAndPage);\n");
      out.write("                } else {\n");
      out.write("                    showMessage(\"获取权限操作历史列表\", result.msg, false);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function bindLogClick() {\n");
      out.write("                $(\".log-edit\").click(function (e) {\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    var logId = $(this).attr(\"data-id\"); // 选中的log id\n");
      out.write("                    console.log(logId);\n");
      out.write("                    if (confirm(\"确定要还原这个操作吗?\")) {\n");
      out.write("                        $.ajax({\n");
      out.write("                            url: \"/sys/log/recover.json\",\n");
      out.write("                            data: {\n");
      out.write("                                id: logId\n");
      out.write("                            },\n");
      out.write("                            success: function (result) {\n");
      out.write("                                if (result.ret) {\n");
      out.write("                                    showMessage(\"还原历史记录\", \"操作成功\", true);\n");
      out.write("                                    loadLogList();\n");
      out.write("                                } else {\n");
      out.write("                                    showMessage(\"还原历史记录\", result.msg, false);\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                        });\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("            Date.prototype.Format = function (fmt) { //author: meizz\n");
      out.write("                var o = {\n");
      out.write("                    \"M+\": this.getMonth() + 1, //月份\n");
      out.write("                    \"d+\": this.getDate(), //日\n");
      out.write("                    \"h+\": this.getHours(), //小时\n");
      out.write("                    \"m+\": this.getMinutes(), //分\n");
      out.write("                    \"s+\": this.getSeconds(), //秒\n");
      out.write("                    \"q+\": Math.floor((this.getMonth() + 3) / 3), //季度\n");
      out.write("                    \"S\": this.getMilliseconds() //毫秒\n");
      out.write("                };\n");
      out.write("                if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n");
      out.write("                for (var k in o)\n");
      out.write("                    if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\n");
      out.write("                return fmt;\n");
      out.write("            };\n");
      out.write("            var formatJson = function(json, options) {\n");
      out.write("                if(json == '') return '';\n");
      out.write("                var reg = null,\n");
      out.write("                    formatted = '',\n");
      out.write("                    pad = 0,\n");
      out.write("                    PADDING = '    '; // one can also use '\\t' or a different number of spaces\n");
      out.write("\n");
      out.write("                // optional settings\n");
      out.write("                options = options || {};\n");
      out.write("                // remove newline where '{' or '[' follows ':'\n");
      out.write("                options.newlineAfterColonIfBeforeBraceOrBracket = (options.newlineAfterColonIfBeforeBraceOrBracket === true) ? true : false;\n");
      out.write("                // use a space after a colon\n");
      out.write("                options.spaceAfterColon = (options.spaceAfterColon === false) ? false : true;\n");
      out.write("\n");
      out.write("                // begin formatting...\n");
      out.write("                if (typeof json !== 'string') {\n");
      out.write("                    // make sure we start with the JSON as a string\n");
      out.write("                    json = JSON.stringify(json);\n");
      out.write("                } else {\n");
      out.write("                    // is already a string, so parse and re-stringify in order to remove extra whitespace\n");
      out.write("                    json = JSON.parse(json);\n");
      out.write("                    json = JSON.stringify(json);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // add newline before and after curly braces\n");
      out.write("                reg = /([\\{\\}])/g;\n");
      out.write("                json = json.replace(reg, '\\r\\n$1\\r\\n');\n");
      out.write("\n");
      out.write("                // add newline before and after square brackets\n");
      out.write("                reg = /([\\[\\]])/g;\n");
      out.write("                json = json.replace(reg, '\\r\\n$1\\r\\n');\n");
      out.write("\n");
      out.write("                // add newline after comma\n");
      out.write("                reg = /(\\,)/g;\n");
      out.write("                json = json.replace(reg, '$1\\r\\n');\n");
      out.write("\n");
      out.write("                // remove multiple newlines\n");
      out.write("                reg = /(\\r\\n\\r\\n)/g;\n");
      out.write("                json = json.replace(reg, '\\r\\n');\n");
      out.write("\n");
      out.write("                // remove newlines before commas\n");
      out.write("                reg = /\\r\\n\\,/g;\n");
      out.write("                json = json.replace(reg, ',');\n");
      out.write("\n");
      out.write("                // optional formatting...\n");
      out.write("                if (!options.newlineAfterColonIfBeforeBraceOrBracket) {\n");
      out.write("                    reg = /\\:\\r\\n\\{/g;\n");
      out.write("                    json = json.replace(reg, ':{');\n");
      out.write("                    reg = /\\:\\r\\n\\[/g;\n");
      out.write("                    json = json.replace(reg, ':[');\n");
      out.write("                }\n");
      out.write("                if (options.spaceAfterColon) {\n");
      out.write("                    reg = /\\:/g;\n");
      out.write("                    json = json.replace(reg, ': ');\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                $.each(json.split('\\r\\n'), function(index, node) {\n");
      out.write("                    var i = 0,\n");
      out.write("                        indent = 0,\n");
      out.write("                        padding = '';\n");
      out.write("\n");
      out.write("                    if (node.match(/\\{$/) || node.match(/\\[$/)) {\n");
      out.write("                        indent = 1;\n");
      out.write("                    } else if (node.match(/\\}/) || node.match(/\\]/)) {\n");
      out.write("                        if (pad !== 0) {\n");
      out.write("                            pad -= 1;\n");
      out.write("                        }\n");
      out.write("                    } else {\n");
      out.write("                        indent = 0;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    for (i = 0; i < pad; i++) {\n");
      out.write("                        padding += PADDING;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    formatted += padding + node + '\\r\\n';\n");
      out.write("                    pad += indent;\n");
      out.write("                });\n");
      out.write("                return formatted;\n");
      out.write("            };\n");
      out.write("\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
